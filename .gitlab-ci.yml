## image: eclipse-temurin:17-jdk-jammy or openjdk:8-jdk
image: openjdk:8-jdk

variables:

  ANDROID_COMPILE_SDK: "31"
  ANDROID_BUILD_TOOLS: "33.0.2"
  ANDROID_SDK_TOOLS: "11076708"

# Packages installation before running script
before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget unzip
  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}.zip
  - unzip -d android-sdk-linux android-sdk.zip
  - echo y | android-sdk-linux/cmdline-tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
  - echo y | android-sdk-linux/cmdline-tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
  - export ANDROID_HOME=$PWD/android-sdk-linux
  - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
  - chmod +x ./gradlew
  # temporarily disable checking for EPIPE error and use yes to accept all licenses
  - set +o pipefail
  - yes | android-sdk-linux/cmdline-tools/bin/sdkmanager --licenses
  - set -o pipefail

stages:          # List of stages for jobs, and their order of execution
  - build
  - verify
  - unit-test
  - package
  - release
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."
    - ./gradlew assembleDebug
  artifacts:
    paths:
      - app/build/outputs/

verify-job:
  stage: verify
  script:
    - echo "Esegui i controlli di verifica qui"

unit-test-job:
  stage: unit-test
  script:
    - echo "Esegui i test unitari qui"

package-job:
  stage: package
  script:
    - echo "Crea il pacchetto dell'app qui"

release-job:
  stage: release
  script:
    - echo "Prepara la release qui"

deploy-job:
  stage: deploy
  script:
    - echo "Effettua il deploy qui"