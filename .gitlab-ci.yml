image: eclipse-temurin:17-jdk-jammy
stages:
  - build
  - test

variables:
  # Version of Android SDK we're compiling with.
  ANDROID_COMPILE_SDK: "34"
  # Version of the Android build tools we are using.
  ANDROID_BUILD_TOOLS: "34.0.0"
  ANDROID_SDK_TOOLS: "7583922"
  EMULATOR_IMAGE: "24"

# Packages installation before running script
default:
  before_script:
    - apt-get --quiet update --yes
    - apt-get --quiet install --yes wget unzip
    - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
    - unzip -d android-sdk-linux android-sdk.zip

    - mkdir -p android-sdk-linux/cmdline-tools/latest/
    - find android-sdk-linux/cmdline-tools -mindepth 1 -maxdepth 1 ! -name "latest" -exec mv -t android-sdk-linux/cmdline-tools/latest/ {} +

    - export ANDROID_SDK_ROOT=$PWD/android-sdk-linux
    - export ANDROID_HOME=$PWD/android-sdk-linux
    - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
    - export PATH=$PATH:$PWD/android-sdk-linux/emulator/

    # update and install common android sdk components
    - android-sdk-linux/cmdline-tools/latest/bin/sdkmanager --sdk_root=${ANDROID_SDK_ROOT} --update
    - echo y | android-sdk-linux/cmdline-tools/latest/bin/sdkmanager --sdk_root=${ANDROID_SDK_ROOT} "platforms;android-${ANDROID_COMPILE_SDK}" "build-tools;${ANDROID_BUILD_TOOLS}"

    
    - chmod +x ./gradlew
    - set +o pipefail
    - yes | android-sdk-linux/cmdline-tools/latest/bin/sdkmanager --licenses
    - set -o pipefail

# Check linting
lintDebug:
  interruptible: true
  stage: build
  script:
    - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint
  artifacts:
    paths:
      - app/lint/reports/lint-results-debug.html
    expose_as: "lint-report"
    when: always

# Make Project
assembleDebug:
  interruptible: true
  stage: build
  script:
    - ./gradlew assembleDebug
  artifacts:
    paths:
      - app/build/outputs/

# Run all tests, if any fails, interrupt the pipeline (fail it)
debugTests:
  needs: [lintDebug, assembleDebug]
  interruptible: true
  stage: test
  script:
    # install packages needed by emulator
    - apt-get install libx11-dev libpulse0 libgl1 libnss3 libxcomposite-dev libxcursor1 libasound2 --yes

    # install android sdk components and emulator
    - chmod +x android-sdk-linux/cmdline-tools/latest/bin/sdkmanager
    - android-sdk-linux/cmdline-tools/latest/bin/sdkmanager "platform-tools" "emulator" "system-images;android-${EMULATOR_IMAGE};default;armeabi-v7a"

    # download script for emulator waiting
    - wget --quiet --output-document=android-wait-for-emulator https://raw.githubusercontent.com/travis-ci/travis-cookbooks/0f497eb71291b52a703143c5cd63a217c8766dc9/community-cookbooks/android-sdk/files/default/android-wait-for-emulator
    - chmod +x android-wait-for-emulator

    # create virtual device named "test"
    - echo no | android-sdk-linux/cmdline-tools/latest/bin/avdmanager -v create avd -n test -k "system-images;android-${EMULATOR_IMAGE};default;armeabi-v7a"

    # start adb server
    - android-sdk-linux/platform-tools/adb start-server

    # run emulator and tests
    - android-sdk-linux/emulator/emulator -avd test -no-boot-anim -no-window -no-audio -no-snapshot &
    - ./android-wait-for-emulator
    - android-sdk-linux/platform-tools/adb shell input keyevent 82
    - ./gradlew connectedDebugAndroidTest --info
    - ./gradlew createDebugCoverageReport # Generate code coverage report
    - ./gradlew test --info # For unit tests
    #- ./gradlew testDebug --info
    #- ./gradlew testDebugUnitTest
    - ./gradlew jacocoTestReport
  artifacts:
    paths:
      - app/build/outputs/apk/debug/app-debug.apk
      - app/build/reports/androidTests/connected/
      - app/build/reports/coverage/androidTest/
      - app/build/reports/tests/testDebugUnitTest
      - app/build/reports/jacoco/jacocoTestReport/